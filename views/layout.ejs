<!DOCTYPE html>
<html>
  <head>
    <title>Pullovr</title>
    <!-- Viewport mobile tag for sensible mobile support -->
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
  <% if(req.options.action == 'show'){ %>
    <% var feed = data.feed %>
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:site" content="@pullovr" />
    <meta name="twitter:title" content="<%= feed.title %>" />
    <meta name="twitter:description" content="<%= feed.description %>" />
    <meta name="twitter:image" content="<%= feed.poster %>" />
    <meta name="twitter:url" content="http://pullover.com/show/<%= feed.id %>" />

    <meta property="og:site_name" content="Pullovr"/>
    <meta property="og:type" content="website" />
    <meta property="og:title" content="<%= feed.title %>"/>
    <meta property="og:url" content="http://pullover.com/show/<%= feed.id %>"/>
    <meta property="og:image" content="<%= feed.poster %>"/>
    <meta property="og:description" content="<%= feed.description %>" />
    <meta property="fb:app_id" content="537575043051862" />
    <%
       if(feed.episodes) {
         var file = feed.episodes[0].fileType;
         var type = file.split('/');
    %>

    <meta property="og:<%= type[0] %>" content="<%= feed.episodes[0].primaryEnclosureUrl %>" />
    <meta property="og:<%= type[0] %>:type" content="<%= feed.episodes[0].fileType %>" />
      <% } %>
  <% } %>

    <!--
        Stylesheets and Preprocessors
        ==============================

        You can always bring in CSS files manually with `<link>` tags, or asynchronously
        using a solution like AMD (RequireJS).  Or, if you like, you can take advantage
        of Sails' conventional asset pipeline (boilerplate Gruntfile).

        By default, stylesheets from your `assets/styles` folder are included
        here automatically (between STYLES and STYLES END). Both CSS (.css) and LESS (.less)
        are supported. In production, your styles will be minified and concatenated into
        a single file.

        To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Change the order of your CSS files
            + Import stylesheets from other directories
            + Use a different or additional preprocessor, like SASS, SCSS or Stylus
    -->
    <link href="//vjs.zencdn.net/4.11/video-js.css" rel="stylesheet">
    <!--STYLES-->
    <link rel="stylesheet" href="/styles/importer.css">
    <!--STYLES END-->

  </head>

  <body>
    <header class="container">
      <div class="row">
        <div class="col-lg-12">
		      <h1 class="brand"><a href="/">Pullovr</a></h1>
          <% if(data.user){ %>
            <p><%= data.user.twitterName %></p>
          <% } %>
          <div class="errors front-end-errors"><%- req.flash('message') %></div>
		       <form class="feed-form" action="/search" method="post">
            <div class="search-field">
              <input class="input" type="text" name="search" class="form-control" value="" placeholder="Find a Podcast or add a feed">
              <input class="btn btn-default submit" type="submit" value="Submit">
            </div><!-- /input-group -->
		      </form>
        </div>
      </div>
    </header>

    <%- body %>

    <footer class="footer">
      <div class="container">
        <div class="row">
          <div class="col-xs-6">
            <p>Pullovr is made in NC</p>
          </div>
          <div class="col-xs-6">
            <nav class="footer-nav">
              <a href="http://twitter.com/pullovr" title="Contact Us">Contact Us via Twitter</a>
            </nav>
          </div>
        </div>
      </div>
    </footer>



    <!--
        Client-side Templates
        ========================

        HTML templates are important prerequisites of modern, rich client applications.
        To work their magic, frameworks like Backbone, Angular, Ember, and Knockout require
        that you load these templates client-side.

        By default, your Gruntfile is configured to automatically load and precompile
        client-side JST templates in your `assets/templates` folder, then
        include them here automatically (between TEMPLATES and TEMPLATES END).

        To customize this behavior to fit your needs, just edit `tasks/pipeline.js`.
        For example, here are a few things you could do:

            + Import templates from other directories
            + Use a different template engine (handlebars, jade, dust, etc.)
            + Internationalize your client-side templates using a server-side
              stringfile before they're served.
    -->

    <!--TEMPLATES-->
    
    <!--TEMPLATES END-->


    <!--

      Client-side Javascript
      ========================

      You can always bring in JS files manually with `script` tags, or asynchronously
      on the client using a solution like AMD (RequireJS).  Or, if you like, you can
      take advantage of Sails' conventional asset pipeline (boilerplate Gruntfile).

      By default, files in your `assets/js` folder are included here
      automatically (between SCRIPTS and SCRIPTS END).  Both JavaScript (.js) and
      CoffeeScript (.coffee) are supported. In production, your scripts will be minified
      and concatenated into a single file.

      To customize any part of the built-in behavior, just edit `tasks/pipeline.js`.
      For example, here are a few things you could do:

          + Change the order of your scripts
          + Import scripts from other directories
          + Use a different preprocessor, like TypeScript

    -->
    <% console.log(req.options); %>
    <% if(req.options.action == 'show'){ %>
    <script src="//vjs.zencdn.net/4.11/video.js"></script>
    <script src="/js/player.js"></script>
    <script src="/js/audio.js"></script>
    <script type="text/javascript" src="//cdnjs.cloudflare.com/ajax/libs/moment.js/2.9.0/moment.min.js"></script>
    <% } %>
    <script src="/js/dependencies/sails.io.js"></script>
    <script src="/js/style.js"></script>

    <script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'pullovr'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
      var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
      dsq.src = '//' + disqus_shortname + '.disqus.com/embed.js';
      (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
    </script>
    <noscript>Please enable JavaScript to view the <a href="https://disqus.com/?ref_noscript">comments powered by Disqus.</a></noscript>


  </div>
    <script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'pullovr'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function () {
      var s = document.createElement('script'); s.async = true;
      s.type = 'text/javascript';
      s.src = '//' + disqus_shortname + '.disqus.com/count.js';
      (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
    }());
    </script>
    <script>
    // (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
    //   (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
    //   m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    // })(window,document,'script','//www.google-analytics.com/analytics.js','ga');
    //
    // ga('create', 'UA-58658599-1', 'auto');
    // ga('send', 'pageview');
    </script>
    <script>
    window.fbAsyncInit = function() {
      FB.init({
        appId      : '537575043051862',
        xfbml      : true,
        version    : 'v2.2'
      });
    };

    (function(d, s, id){
      var js, fjs = d.getElementsByTagName(s)[0];
      if (d.getElementById(id)) {return;}
      js = d.createElement(s); js.id = id;
      js.src = "//connect.facebook.net/en_US/sdk.js";
      fjs.parentNode.insertBefore(js, fjs);
    }(document, 'script', 'facebook-jssdk'));
    </script>
  </body>
</html>
